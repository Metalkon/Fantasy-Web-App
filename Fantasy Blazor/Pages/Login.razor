@page "/Login"
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage /* may need to use the sync version */

<h3>Login</h3>
<div style="display: flex; flex-direction: column; margin-bottom: 10px;">
    <label style="margin-bottom: 5px; font-weight: bold;">Name:<span style="color: gray; font-size: 12px;"> (Required)</span></label>
    <input type="text" style="width: 50%;" @bind-value="user.Username" />
</div>
<div style="display: flex; flex-direction: column; margin-bottom: 10px;">
    <label style="margin-bottom: 5px; font-weight: bold;">Email:<span style="color: gray; font-size: 12px;"> (Required)</span></label>
    <input type="text" style="width: 50%;" @bind-value="user.Email" />
</div>
<div style="display: flex; flex-direction: column; margin-bottom: 10px;">
    <label style="margin-bottom: 5px; font-weight: bold;">LoginCode:</label>
    <input type="text" style="width: 50%;" @bind-value="user.LoginCode" />
</div>

<button class="btn btn-primary" @onclick="@(() => HandleLogin(user))">Login</button>

@code {
    UserLogin user = new UserLogin();
    private string message = "default message";


    async Task HandleLogin(UserLogin user)
    {
        var result = await Http.PostAsJsonAsync($"https://localhost:7000/user/Login", user);
        var token = await result.Content.ReadAsStringAsync();
        await LocalStorage.SetItemAsync("token", token);
        await AuthStateProvider.GetAuthenticationStateAsync();
    }
}