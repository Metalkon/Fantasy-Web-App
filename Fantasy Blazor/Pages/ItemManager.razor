@page "/ItemManager"
@attribute [Authorize]

<h2 style="text-align:center; margin-bottom: 2%">Item Management Page</h2>

<!-- Page State -->
@switch (pageState)
{
    // DISPLAY: Loading
    case 1:
        <img src="./images/KnightRun.gif" alt="Image" style="display: block; margin: 0 auto;" />
        <p style="text-align:center;">@message</p>
        break;
    // ERROR: No Pages Error
    case 2:
        <img src="./images/KnightFall.gif" alt="Image" style="display: block; margin: 0 auto;" />
        <p style="text-align:center;">@message</p>
        <!-- Pagination (Previous Only) -->
        <div style="display: flex; justify-content: center; align-items: center;">
            @if (pageNumber > 1)
            {
                <a class="page-link" @onclick="PreviousPage">Previous</a>
            }
            else
            {
                <a class="page-link">Previous</a>
            }
            <a class="page-link">@pageNumber</a>
            <a class="page-link">Next</a>
        </div>
        break;
    // DISPLAY: CreateItem
    case 3:
        <h3>Create Item</h3>
        <div style="display: flex; flex-direction: column; margin-bottom: 10px;">
            <label style="margin-bottom: 5px; font-weight: bold;">Name:<span style="color: gray; font-size: 12px;"> (Required)</span></label>
            <input type="text" style="width: 50%;" @bind-value="createItem.Name" />
        </div>
        <div style="display: flex; flex-direction: column; margin-bottom: 10px;">
            <label style="margin-bottom: 5px; font-weight: bold;">Rarity:<span style="color: gray; font-size: 12px;"> (Required)</span></label>
            <input type="text" style="width: 50%;" @bind-value="createItem.Rarity" />
        </div>
        <div style="display: flex; flex-direction: column; margin-bottom: 10px;">
            <label style="margin-bottom: 5px; font-weight: bold;">Description:<span style="color: gray; font-size: 12px;"> (Required)</span></label>
            <input type="text" style="width: 50%;" @bind-value="createItem.Description" />
        </div>
        <div style="display: flex; flex-direction: column; margin-bottom: 10px;">
            <label style="margin-bottom: 5px; font-weight: bold;">Price:</label>
            <input type="number" style="width: 50%;" @bind-value="createItem.Price" />
        </div>
        <div style="display: flex; flex-direction: column; margin-bottom: 10px;">
            <label style="margin-bottom: 5px; font-weight: bold;">Image:</label>
            <input type="text" style="width: 50%;" @bind-value="createItem.Image" placeholder="./images/Icon/Question_Mark.jpg" />
        </div>
        // Save/Back Buttons
        <button class="btn btn-primary" @onclick="@(() => CreateItem(createItem))">Create</button>
        <button class="btn btn-primary" @onclick="@(() => Back())">Back</button>
        <div>
            <span style="color: red; font-size: 12px;">@req</span>
        </div>
        break;
    // DISPLAY: EditItem
    case 4:
        <h3>Edit Item</h3>
        <div style="display: flex; flex-direction: column; margin-bottom: 10px;">
            <label style="margin-bottom: 5px; font-weight: bold;">Name:<span style="color: gray; font-size: 12px;"> (Required)</span></label>
            <input type="text" style="width: 50%;" @bind-value="editItem.Name" />
        </div>
        <div style="display: flex; flex-direction: column; margin-bottom: 10px;">
            <label style="margin-bottom: 5px; font-weight: bold;">Rarity:<span style="color: gray; font-size: 12px;"> (Required)</span></label>
            <input type="text" style="width: 50%;" @bind-value="editItem.Rarity" />
        </div>
        <div style="display: flex; flex-direction: column; margin-bottom: 10px;">
            <label style="margin-bottom: 5px; font-weight: bold;">Description:<span style="color: gray; font-size: 12px;"> (Required)</span></label>
            <input type="text" style="width: 50%;" @bind-value="editItem.Description" />
        </div>
        <div style="display: flex; flex-direction: column; margin-bottom: 10px;">
            <label style="margin-bottom: 5px; font-weight: bold;">Price:</label>
            <input type="number" style="width: 50%;" @bind-value="editItem.Price" />
        </div>
        <div style="display: flex; flex-direction: column; margin-bottom: 10px;">
            <label style="margin-bottom: 5px; font-weight: bold;">Image:</label>
            <input type="text" style="width: 50%;" @bind-value="editItem.Image" placeholder="./images/Icon/Question_Mark.jpg" />
        </div>
        // Save/Back Buttons
        <button class="btn btn-primary" @onclick="@(() => EditItemSave(editItem))">Save Changes</button>
        <button class="btn btn-primary" @onclick="@(() => Back())">Back</button>
        <div>
            <span style="color: red; font-size: 12px;">@req</span>
        </div>
        break;
    // ERROR: CreateItem
    case 5:
        <img src="./images/KnightFall.gif" alt="Image" style="display: block; margin: 0 auto;" />
        <p style="text-align:center;">@message</p>
        <button class="btn btn-primary" @onclick="@(() => CreateItem())">Return</button>
        break;
    // ERROR: EditItem
    case 6:
        <img src="./images/KnightFall.gif" alt="Image" style="display: block; margin: 0 auto;" />
        <p style="text-align:center;">@message</p>
        <button class="btn btn-primary" @onclick="@(() => EditItem(editItem.Id))">Return</button>
        break;
    // DISPLAY: Item Manager Table
    default:
        // Search Query Input Box/Button
        <div style="display: flex; padding-bottom: 10px; padding-top: 10px;">
            <input id="nameInput" type="text" style="margin-right: 5px" @bind-value="searchInput" />
            <button class="btn btn-primary" @onclick="@(() => NameSearch(searchInput))">Search</button>
            <div style="flex: 1;"></div>
            <button class="btn btn-primary" style="float: right;" @onclick="@(() => CreateItem())">Create Item</button>
        </div>
        // Item Table
        <table class="table table-bordered table-striped" style="width:100%">
            <thead>
                <tr>
                    <th>Image</th>
                    <th>Name</th>
                    <th>Rarity</th>
                    <th>Price</th>
                    <th>Description</th>
                    <th style="width: 1%">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in items)
                {
                    <tr>
                        <td style="width: 1%;">
                            @if (!string.IsNullOrEmpty(item.Image))
                            {
                                <img src="@item.Image">
                            }
                            else
                            {
                                <img src="~/image/icon/question_mark.jpg" alt="Question Mark" />
                            }
                        </td>
                        <td style="width: 15%; vertical-align: middle;">@item.Name</td>
                        <td style="width: 15%; vertical-align: middle;">@item.Rarity</td>
                        <td style="width: 15%; vertical-align: middle;">@item.Price</td>
                        <td style="vertical-align: middle;">@item.Description</td>
                        <td style="width: 1%; vertical-align: middle;">
                            <div class="text-center d-inline-flex">
                                <!-- Edit/Delete Buttons -->
                                <button class="btn btn-primary rounded" @onclick="@(() => EditItem(item.Id))" style="margin-right: 5px">Edit</button>
                                <button class="btn btn-danger rounded" @onclick="@(() => DeleteItem(item.Id))">Delete</button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <!-- Pagination Buttons (Previous/Next) -->
        <div style="display: flex; justify-content: center; align-items: center;">
            @if (pageNumber > 1)
            {
                <a class="page-link" @onclick="PreviousPage">Previous</a>
            }
            else
            {
                <a class="page-link">Previous</a>
            }
            <a class="page-link">@pageNumber</a>
            @if (items.Count < 5)
            {
                <a class="page-link">Next</a>

            }
            else
            {
                <a class="page-link" @onclick="NextPage">Next</a>
            }
        </div>
        break;
}

@code {
    private int pageState;
    private string message;
    private int pageNumber = 1;
    private int pageSize = 5;
    private string searchInput;
    private string searchQuery = "";
    private int pageId = 0;
    private string req;
    private List<int> pageHistory = new List<int>();
    private List<ItemDTO> items = new List<ItemDTO>();
    private HttpClient client = new HttpClient();
    private ItemDTO createItem = new ItemDTO();
    private ItemDTO editItem = new ItemDTO();

    // Startup
    protected override async Task OnInitializedAsync()
    {
        pageState = 1;
        message = "Loading Item Table...";
        await ItemSearch();
    }

    // Input Search Query
    private async Task NameSearch(string searchInput)
    {
        searchQuery = searchInput;
        pageNumber = 1;
        await ItemSearch();
    }

    // Item Table Search
    private async Task ItemSearch()
    {
        try
        {
            ItemSearchResponse<ItemDTO> result = await client.GetFromJsonAsync<ItemSearchResponse<ItemDTO>>($"https://localhost:7000/api/Items?pageNumber={pageNumber}&pageSize={pageSize}&searchQuery={searchQuery}&pageID={pageId}");
            if (items != null)
            {
                items = result.Data.ToList();
                pageState = 0;
                message = "";
            }
            else
            {
                pageState = 2;
                message = "Error loading items. The requested table returned as null.";
            }
        }
        catch (Exception ex)
        {
            pageState = 2;
            message = "Error loading items. Please try again.";
        }
    }

    // Display Create Item Page
    private async Task CreateItem()
    {
        req = null;
        createItem = new ItemDTO() { Image = "./images/Icon/Question_Mark.jpg" };
        pageState = 3;
    }

    // Create New Item
    private async Task CreateItem(ItemDTO createItem)
    {
        if (createItem.Name == null || createItem.Description == null || createItem.Rarity == null)
        {
            req = "Please fill out all required input fields";
            return;
        }

        var response = await client.PostAsJsonAsync("https://localhost:7000/api/Items", createItem);
        if (response.IsSuccessStatusCode)
        {
            pageState = 0;
            req = null;
            await ItemSearch();
        }
        else
        {
            pageState = 5;
            message = "Error creating new item";
        }
    }

    // Display Edit Item Page
    private async Task EditItem(int itemId)
    {
        try
        {
            editItem = await client.GetFromJsonAsync<ItemDTO>($"https://localhost:7000/api/Items/{itemId}");
            if (editItem != null)
            {
                pageState = 4;
                message = "";
            }
            else
            {
                pageState = 6;
                message = "Error loading item. The requested item returned as null.";
            }
        }
        catch (Exception ex)
        {
            pageState = 6;
            message = "Error loading item. Please try again.";
        }
    }

    // Save Edited Item
    private async Task EditItemSave(ItemDTO editItem)
    {
        if (editItem.Name == null || editItem.Description == null || editItem.Rarity == null)
        {
            req = "Please fill out all required input fields";
            return;
        }
        var response = await client.PutAsJsonAsync("https://localhost:7000/api/Items", editItem);
        if (response.IsSuccessStatusCode)
        {
            pageState = 0;
            req = null;
            await ItemSearch();
        }
        else
        {
            pageState = 6;
            message = "Error editing item";
        }
    }

    // Delete Item
    private async Task DeleteItem(int itemId)
    {
        await client.DeleteAsync($"https://localhost:7000/api/Items/{itemId}");
        await ItemSearch();
    }

    // Pagination (Previous)
    private async Task PreviousPage()
    {
        pageNumber--;
        await ItemSearch();
    }

    // Pagination (Next)
    private async Task NextPage()
    {
        pageNumber++;
        await ItemSearch();
    }

    // Return to Item Table Page
    private async Task Back()
    {
        pageState = 0;
        req = null;
    }
}